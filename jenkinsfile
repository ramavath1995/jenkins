def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline{
    agent any
    tools{
        maven "maven"
        jdk "jdk8"
    }

    environment{
        NEXUS_LOGIN = "nexuslogin"
        NEXUS_USER = "admin"
        NEXUS_PASS = "admin123"
        NEXUS_PORT = "8081"
        NEXUS_IP = "172.31.51.245"
        RELEASE_REPO = "release-repo"
        CENTRAL_REPO= "central-repo"
        SNAPSHOT_REPO = "snapshot-repo"
        GROUP_REPO = "group-repo"
        SONARSERVER = "sonarserver"
        SONARSCANNER = "sonarscanner"
        AWS_CREDS = "ecr:ap-south-1:awscreds"
        ECR_LOCATION = "730335591603.dkr.ecr.ap-south-1.amazonaws.com/jenkinscid"
        IMAGE_URL = "730335591603.dkr.ecr.ap-south-1.amazonaws.com"
    }
    stages{
        stage("Build"){
            steps{
                sh 'mvn -s settings.xml clean install  -DskipTests'
            }
            post{
                success{
                    echo 'archiving artifacts'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage("Test"){
            steps{
                sh 'mvn -s settings.xml test'
            }
        }

        stage('Checkstyle'){
            steps{
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment{
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}"){
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=jenkins \
                    -Dsonar.projectName=jenkinsci \
                    -Dsonar.sorces=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.checkstyle.reportsPath=target/checkstyle-result.xml \
                    -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ '''
                }
            }
        }

        stage('Quality Gate'){
            steps{
                timeout(time: 1, unit: 'HOURS'){
                    waitForQualityGate abortPipeline: true
                }
                
            }
        }
        stage("Artifact Uploader"){
            steps{
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: "${NEXUS_IP}:${NEXUS_PORT}",
                groupId: 'practice',
                version: "${env.BUILD_ID}",
                repository: "${RELEASE_REPO}",
                credentialsId: "${NEXUS_LOGIN}",
                artifacts: [
                    [artifactId: 'jenkinsci',
                    classifier: '',
                    file: 'target/vprofile-v2.war',
                    type: 'war']
                    ]
                )
            }
        }

        stage("Docker Build"){
            steps{
                script{
                    dockerImage = docker.build(ECR_LOCATION + ":${BUILD_NUMBER}", "./docker")
                }
            }
        }

    }
    post{
        always{
            echo "Slack Notification"
            slackSend channel: "#devops",
            color: COLOR_MAP[currentBuild.currentResult],
            message: "*${currentBuild.currentResult}*: job '${env.JOB_NAME}' build ${env.BUILD_NUMBER} \n more info at: ${env.BUILD_URL}"
        }
    }                           
}